#!/bin/bash
#
# Script for running all the benchmark files.
#   It will run each benchmark 3 times.
#   Each run will output into a result file and in the end presented.

# Get root directory for all tests
root="$(pwd)/Test"

# Get root directory for Test #1
testIO="${root}/Test-IO"

# Get root directory for Test #2
testGL="${root}/Test-GrafList"

# Clear all benchmark results
function clear_results {
    cd "${root}"
    echo "Location: $(pwd)"
    echo "Cleaning results"
    find -name results -print -delete
    find -name res.txt -print -delete
}

# Get Start Time in nanoseconds
function start_time {
    start=$(date +%s%N)
    echo "Start (ns)  $start"
}

# Get Stop Time in nanoseconds
function end_time {
    stop=$(date +%s%N)
    echo "Stop  (ns)  $stop"
}

# Calculate Time spent in nanoseconds and milliseconds
# Params: Language
function calc_time {
    end_time
    time_spent=$(echo "${stop}-${start}" | bc -l)
    time_spent_ms=$(echo "scale=3; ${time_spent}/1000000" | bc -l)
    echo "$1 Total (ms)  $time_spent_ms" | tee /dev/tty | tee >> results || tee > results
}

# Pass arguments to calculate time spend in milliseconds
# Params: Work, Command, Language
function time_spent {

    echo "${1}"
    start_time
    ${2} #&>/dev/null
    calc_time "${3}"
    echo
}

# Calculate memory usage
# Params:
function calc_mem {
    file=temp
    echo
    echo "Calculating memory for ${1}"
    valgrind ${2} &> ${file}
    tail -15 ${file}
    rm ${file}
}

# Prepare for IO test
function prepareDumpFile {
    cd "${testIO}/DumpFile"
    echo "Location: $(pwd)"

    time_spent  "Compiling DumpFile" "javac Lorem.java"
    time_spent  "Starting Lorem Processing" "java Lorem"
    calc_mem    "Lorem" "java Lorem"
}

# Prepare for Test-GrafList
function prepareGrafList {
    cd "${testGL}/DumpFile"
    echo "Location: $(pwd)"
    echo "Generating DumpFile"

    head -n 5000 "${testIO}/DumpFile/dump.txt" > dump.txt
}

# Benchmark TestIO
# Params: #Runs
function benchmark-IO {
    # Clean old results
    cd "${testIO}"
    clear_results
    clear

    # For C#
    cd "${testIO}/cs_mono"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [1/5] Run [${i}/${1}] C#"
        time_spent "Starting Test" "./TestIO/TestIO/bin/Debug/TestIO.exe -f ${testIO}/DumpFile/dump.txt " "C#"
    done

    # For Python
    cd "${testIO}/python"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [2/5] Run [${i}/${1}] Python"
        time_spent "Starting Test" "python3 TestIO.py -f ../DumpFile/dump.txt"    "Python"
    done

    # For Java
    cd "${testIO}/java"
    echo "Location: $(pwd)"
    javac TestIO.java &> /dev/null
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [3/5] Run [${i}/${1}] Java"
        time_spent "Starting Test" "java TestIO         -f ../DumpFile/dump.txt"  "Java"
    done

    # For Node
    cd "${testIO}/node"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [4/5] Run [${i}/${1}] nodejs"
        time_spent "Starting Test" "node TestIO.js        ../DumpFile/dump.txt"   "Node"
    done

    # For IO
    cd "${testIO}/io"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [5/5] Run [${i}/${1}] iojs"
        time_spent "Starting Test" "node TestIO.js          ../DumpFile/dump.txt"  "IO"
    done

    # Get avg
    cd "${testIO}"
    echo -e "\n$(date)" >> Test-IO.txt || echo "$(date)" > Test-IO.txt
    echo "TestIO avg results with ${1} runs." | tee /dev/tty | tee >> Test-IO.txt
    find -name results -execdir awk '{sum+=$4} END {printf "%-6s %.3f %s \n", $1, sum/NR, "ms"}' {} \; | sort -k2 -n | tee /dev/tty | tee >> Test-IO.txt


}

# Check for clear command
if [[ $1 == "-c" ]]; then
    read -p "Warning gonna clear all benchmark results in ${root}! Are you sure [y/N]? " answer
    case $answer in
        [Yy]* ) clear_results; exit 0;;
        [Nn]* ) exit 0;;
        * ) exit 0;;
    esac
fi

benchmark-IO "2"
#prepareDumpFile
#prepareGrafList
