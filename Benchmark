#!/bin/bash
#
# Script for running all the benchmark files.
#   It will run each benchmark 100 times for each implementation.
#   Each run will output into a result file and in the end presented.

launchdir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Get root directory for all tests
root="$(pwd)/Test"

# Get root directory for Test IO
testIO="${root}/Test-IO"

# Get root directory for Test Graflist
testGL="${root}/Test-GrafList"

# Get root directory for Test Fib
testFIB="${root}/Test-Fibonacci"

# Get root directory for Test LZW
testLZW="${root}/Test-LZWCompression"

# Clear all benchmark results
function clear_results {
    cd "${root}"
    echo "Location: $(pwd)"
    echo "Cleaning results"
    find -name results -print -delete
    find -name res.txt -print -delete
    find -name memory.txt -print -delete
    #find -name __pycache__ -print -delete
}

# Get Start Time in nanoseconds
function start_time {
    start=$(date +%s%N)
    echo "Start (ns)  $start"
}

# Get Stop Time in nanoseconds
function end_time {
    stop=$(date +%s%N)
    echo "Stop  (ns)  $stop"
}

# Calculate Time spent in nanoseconds and milliseconds
# Params: Language
function calc_time {
    end_time
    time_spent=$(echo "${stop}-${start}" | bc -l)
    time_spent_ms=$(echo "scale=3; ${time_spent}/1000000" | bc -l)
    echo "$1 Total (ms)  $time_spent_ms" | tee /dev/tty | tee >> results || tee > results
}

# Pass arguments to calculate time spend in milliseconds
# Params: Work, Command, Language
function time_spent {
    echo "${1}"
    start_time
    ${2} #&>/dev/null
    calc_time "${3}"
    echo
}

# Calculate memory usage
# Params: Test Command, Language, Loops
function calc_mem {
    for (( i=1; i<=$4; i++))
    do
      echo "${1} Calculating memory alloction RSS for ${3}"
      python "${launchdir}/memusg" -a memory.txt ${2} #&> /dev/null
      echo ""
    done
}

# Prepare for IO test
function prepareDumpFile {
    cd "${testIO}/DumpFile"
    echo "Location: $(pwd)"

    time_spent  "Compiling DumpFile" "javac Lorem.java"
    time_spent  "Starting Lorem Processing" "java Lorem"
    calc_mem    "Lorem" "java Lorem"
}

# Prepare for Test-GrafList
function prepareGrafList {
    cd "${testGL}/DumpFile"
    echo "Location: $(pwd)"
    echo "Generating DumpFile"

    head -n 5000 "${testIO}/DumpFile/dump.txt" > dump.txt
}

function prepareCompression {
    cd "${testLZW}/DumpFile"
    echo "Location: $(pwd)"
    echo "Generating DumpFile"

    head -n 15000 "${testIO}/DumpFile/dump.txt" > dump.txt
}

# Benchmark TestIO Runtime
# Params: #Runs
function benchmark-IO {
    # Clean old results
    cd "${testIO}"
    clear

: <<'END'
    # For C#
    cd "${testIO}/cs_mono"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [1/5] Run [${i}/${1}] C#"
        time_spent "Starting Test" "mono ./TestIO/TestIO/bin/Debug/TestIO.exe -f ${testIO}/DumpFile/dump.txt " "C#"
    done

    # For Python
    cd "${testIO}/python"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [2/5] Run [${i}/${1}] Python"
        time_spent "Starting Test" "python3 TestIO.py -f ../DumpFile/dump.txt"    "Python"
    done

    # For Java
    cd "${testIO}/java"
    echo "Location: $(pwd)"
    javac TestIO.java &> /dev/null
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [3/5] Run [${i}/${1}] Java"
        time_spent "Starting Test" "java TestIO         -f ../DumpFile/dump.txt"  "Java"
    done
END
    # For Node
    cd "${testIO}/node"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "TestIO [4/5] Run [${i}/${1}] nodejs"
        time_spent "Starting Test" "node TestIO.js        ../DumpFile/dump.txt"   "Node"
    done

    # For IO
    #cd "${testIO}/io"
    #echo "Location: $(pwd)"
    #for (( i=1; i<=$1; i++))
    #do
    #    echo "TestIO [5/5] Run [${i}/${1}] iojs"
    #    time_spent "Starting Test" "node TestIO.js          ../DumpFile/dump.txt"  "IO"
    #done

    # Get avg
    cd "${testIO}"
    echo -e "\n$(date)" >> Test-IO.txt || echo "$(date)" > Test-IO.txt
    echo "TestIO avg results with ${1} runs." | tee /dev/tty | tee >> Test-IO.txt
    find -name results -execdir awk '{sum+=$4} END {printf "%-6s %.3f %s \n", $1, sum/NR, "ms"}' {} \; | sort -k2 -n | tee /dev/tty | tee >> Test-IO.txt
}

# Benchmark TestIO Memory
# Params: Work, Command, Language
function benchmark-IO-mem {
: <<'END'
    #For C#
    cd "${testIO}/cs_mono"
    echo "Location: $(pwd)"
    calc_mem "Test-IO" "mono ./TestIO/TestIO/bin/Debug/TestIO.exe -f ${testIO}/DumpFile/dump.txt" "C#" "2"

    cd "${testIO}/python"
    echo "Location: $(pwd)"
    calc_mem "Test-IO" "python3 TestIO.py -f ../DumpFile/dump.txt" "Python" "2"

    # For Java
    cd "${testIO}/java"
    echo "Location: $(pwd)"
    calc_mem "Test-IO" "java TestIO -f ../DumpFile/dump.txt" "Java" "2"
END
    # For Node
    cd "${testIO}/node"
    echo "Location: $(pwd)"
    calc_mem "Test-IO" "node TestIO.js -f ../DumpFile/dump.txt" "Node" "2"

    # For IO
    #cd "${testIO}/io"
    #echo "Location: $(pwd)"
    #calc_mem "Test-IO" "node TestIO.js -f ../DumpFile/dump.txt" "IO" "2"
}

function benchmark-fibonacci {
    # Clean old results
    cd "${testFIB}"
    clear

: <<'END'
    # For C#
    cd "${testFIB}/cs-mono"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "Fibonacci [1/5] Run [${i}/${1}] C#"
        time_spent "Starting Test" "mono ./TestFibonacci/TestFibonacci/bin/Debug/TestFibonacci.exe" "C#"
    done

    # For Python
    cd "${testFIB}/python"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "Fibonacci [2/5] Run [${i}/${1}] Python"
        time_spent "Starting Test" "python3 Fibonacci.py"    "Python"
    done

    # For Java
    cd "${testFIB}/java"
    echo "Location: $(pwd)"
    javac Fibonacci.java &> /dev/null
    for (( i=1; i<=$1; i++))
    do
        echo "Fibonacci [3/5] Run [${i}/${1}] Java"
        time_spent "Starting Test" "java Fibonacci"  "Java"
    done
END
    # For Node
    cd "${testFIB}/node"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "Fibonacci [4/5] Run [${i}/${1}] nodejs"
        time_spent "Starting Test" "node Fibonacci.js"   "Node"
    done

    # For IO
    #cd "${testFIB}/io"
    #echo "Location: $(pwd)"
    #for (( i=1; i<=$1; i++))
    #do
    #    echo "Fibonacci [5/5] Run [${i}/${1}] iojs"
    #    time_spent "Starting Test" "node Fibonacci.js"  "IO"
    #done

    # Get avg
    cd "${testFIB}"
    echo -e "\n$(date)" >> Test-Fibonacci.txt || echo "$(date)" > Test-Fibonacci.txt
    echo "Test-Fibonacci avg results with ${1} runs." | tee /dev/tty | tee >> Test-Fibonacci.txt
    find -name results -execdir awk '{sum+=$4} END {printf "%-6s %.3f %s \n", $1, sum/NR, "ms"}' {} \; | sort -k2 -n | tee /dev/tty | tee >> Test-Fibonacci.txt
}

function benchmark-fibonacci-mem {
: <<'END'
    #For C#
    cd "${testFIB}/cs-mono"
    echo "Location: $(pwd)"
    calc_mem "Fibonacci" "mono ./TestFibonacci/TestFibonacci/bin/Debug/TestFibonacci.exe" "C#" "2"

    cd "${testFIB}/python"
    echo "Location: $(pwd)"
    calc_mem "Fibonacci" "python3 Fibonacci.py" "Python" "2"

    # For Java
    cd "${testFIB}/java"
    echo "Location: $(pwd)"
    calc_mem "Fibonacci" "java Fibonacci" "Java" "2"
END
    # For Node
    cd "${testFIB}/node"
    echo "Location: $(pwd)"
    calc_mem "Fibonacci" "node Fibonacci.js" "Node" "2"

    # For IO
    #cd "${testFIB}/io"
    #echo "Location: $(pwd)"
    #calc_mem "Fibonacci" "node Fibonacci.js" "IO" "2"
}

function benchmark-LZW {
    # Clean old results
    cd "${testLZW}"
    clear
: <<'END'
    # For C#
    cd "${testLZW}/cs-mono"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "LZWComression [1/5] Run [${i}/${1}] C#"
        time_spent "Starting Test" "mono ./LZWComression/LZWComression/bin/Debug/LZWComression.exe -f ../DumpFile/dump.txt" "C#"
    done

    # For Python
    cd "${testLZW}/python"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "LZWComression [2/5] Run [${i}/${1}] Python"
        time_spent "Starting Test" "python3 LZWCompression.py -f ../DumpFile/dump.txt"    "Python"
    done

    # For Java
    cd "${testLZW}/java"
    echo "Location: $(pwd)"
    javac LZW.java &> /dev/null
    for (( i=1; i<=$1; i++))
    do
        echo "LZWComression [3/5] Run [${i}/${1}] Java"
        time_spent "Starting Test" "java LZW -f ../DumpFile/dump.txt" "Java"
    done
END
    # For Node
    cd "${testLZW}/node"
    echo "Location: $(pwd)"
    for (( i=1; i<=$1; i++))
    do
        echo "LZWComression [4/5] Run [${i}/${1}] nodejs"
        time_spent "Starting Test" "node lzw.js ../DumpFile/dump.txt"   "Node"
    done

    # For IO
    #cd "${testLZW}/io"
    #echo "Location: $(pwd)"
    #for (( i=1; i<=$1; i++))
    #do
    #    echo "LZWComression [5/5] Run [${i}/${1}] iojs"
    #    time_spent "Starting Test" "node lzw.js ../DumpFile/dump.txt"  "IO"
    #done

    # Get avg
    cd "${testLZW}"
    echo -e "\n$(date)" >> Test-LZWCompression.txt || echo "$(date)" > Test-LZWCompression.txt
    echo "Test LZWComression avg results with ${1} runs." | tee /dev/tty | tee >> Test-LZWCompression.txt
    find -name results -execdir awk '{sum+=$4} END {printf "%-6s %.3f %s \n", $1, sum/NR, "ms"}' {} \; | sort -k2 -n | tee /dev/tty | tee >> Test-LZWCompression.txt
}

function benchmark-LZW-mem {
  #For C#
: <<'END'
  cd "${testLZW}/cs-mono"
  echo "Location: $(pwd)"
  calc_mem "LZWComression" "mono ./LZWComression/LZWComression/bin/Debug/LZWComression.exe -f ../DumpFile/dump.txt" "C#" "2"

  cd "${testLZW}/python"
  echo "Location: $(pwd)"
  calc_mem "LZWComression" "python3 LZWCompression.py -f ../DumpFile/dump.txt" "Python" "2"

  # For Java
  cd "${testLZW}/java"
  echo "Location: $(pwd)"
  calc_mem "LZWComression" "java LZW -f ../DumpFile/dump.txt" "Java" "2"
END

  # For Node
  cd "${testLZW}/node"
  echo "Location: $(pwd)"
  calc_mem "LZWComression" "node lzw.js ../DumpFile/dump.txt" "Node" "2"

  # For IO
  #cd "${testLZW}/io"
  #echo "Location: $(pwd)"
  #calc_mem "LZWComression" "node lzw.js ../DumpFile/dump.txt" "IO" "2"
}

# Check for clear command
if [[ $1 == "-c" ]]; then
    read -p "Warning gonna clear all benchmark results in ${root}! Are you sure [y/N]? " answer
    case $answer in
        [Yy]* ) clear_results; exit 0;;
        [Nn]* ) exit 0;;
        * ) exit 0;;
    esac
fi

## Preperations ##
prepareDumpFile
prepareCompression

## Runtime Benchmarks ##
benchmark-IO "100"
benchmark-fibonacci "100"
benchmark-LZW "100"
#prepareGrafList "10"

## Memory Benchmarks ##
benchmark-IO-mem "10"
benchmark-fibonacci-mem "10"
benchmark-LZW-mem "10"
#prepareGrafList-mem "10"
